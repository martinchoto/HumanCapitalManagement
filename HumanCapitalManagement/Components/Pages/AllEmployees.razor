@page "/hr/all"
@rendermode InteractiveServer
<h3 class="text-center">All Employees</h3>
<h4 class="text-center btn btn-danger">@message</h4>

@if (employees == null)
{
	<p class="text-center">Loading...</p>
}
else if (employees.Count == 0)
{
	<p class="text-center text-muted">No employees found.</p>
}
else
{
	<table class="table table-striped table-bordered mt-3 text-center">
		<thead class="table-dark text-center">
			<tr>
				<th>Full Name</th>
				<th>Email</th>
				<th>Department</th>
				<th>Job Title</th>
				<th>Roles</th>
				<th>Salary</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody class="text-center">
			@foreach (var emp in employees)
			{
				<tr>
					<td>@emp.FullName</td>
					<td>@emp.Email</td>
					<td>@emp.Department.Name</td>
					<td>@emp.JobTitle</td>
					<td>
						@if (emp.Roles != null && emp.Roles.Any())
						{
							@foreach (var role in emp.Roles)
							{
								<span class="badge bg-secondary">@role.Name</span>
							}
						}
						else
						{
							<em>No roles</em>
						}
					</td>
					<td>@emp.Salary.ToString("f2") lv.</td>
					<td>
						<a class="btn btn-warning btn-sm" href="/hr/edit/@emp.Id">Edit</a>
						<button class="btn btn-danger btn-sm"  @onclick=" async () => await DeleteEmployee(emp.Id)">Delete</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private HttpClient client => ClientFactory.CreateClient("ApiClient");
    private string? message;
    private List<EmployeeDataDTO>? employees;
    protected override async Task OnInitializedAsync()
    {
        employees = await client.GetFromJsonAsync<List<EmployeeDataDTO>>("api/hr/all");
    }
    private async Task DeleteEmployee(int id)
    {
        IJSRuntime jS = JS;
        bool confirmed = await jS.InvokeAsync<bool>("showConfirm", $"Are you sure you want to delete employee {id}?");

		if (confirmed)
		{
			try
			{
				var response = await client.DeleteAsync($"api/hr/delete/{id}");

				if (response.IsSuccessStatusCode)
				{
					var deleted = employees?.FirstOrDefault(e => e.Id == id);
					if (deleted != null) employees.Remove(deleted);
					message = $"✅ Employee {id} deleted.";
				}
				else
				{
					var error = await response.Content.ReadAsStringAsync();
					message = $"❌ Failed to delete: {error}";
				}
			}
			catch (Exception ex)
			{
				message = $"❌ Error: {ex.Message}";
			}
		}
		else
		{
			message = "Deletion canceled.";
		}
	}
}
